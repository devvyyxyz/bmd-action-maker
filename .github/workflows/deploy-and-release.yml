name: Deploy and Create Releases

on:
  push:
    branches:
      - main  # Trigger on push to main or any other branch

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Deploy to GitHub Pages
        uses: JamesIves/github-pages-deploy-action@v4
        with:
          branch: gh-pages  # The branch to deploy to (GitHub Pages)
          folder: .  # Deploy from the root directory (where your HTML files are)
          token: ${{ secrets.GITHUB_TOKEN }}  # GitHub token for authentication

  release:
    runs-on: ubuntu-latest
    needs: deploy  # Ensure release only happens after deploy

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Get the current commit count
        id: commit_count
        run: |
          git fetch --prune --unshallow
          total_commits=$(git rev-list --count HEAD)
          echo "Total commits: $total_commits"
          echo "total_commits=$total_commits" >> $GITHUB_ENV

      - name: Get commit messages since last release
        id: get_commits
        run: |
          # Get the previous tag (last release), or use "v0" if no tag exists
          last_tag=$(git describe --tags --abbrev=0 || echo "v0")
          echo "Last release tag: $last_tag"

          # List all commits between the last tag and HEAD, excluding merges and formatted nicely
          commits=$(git log $last_tag..HEAD --oneline --no-merges)

          # Sanitize commit messages by escaping special characters
          sanitized_commits=$(echo "$commits" | sed 's/[&/\$`]/\\&/g')

          echo "Commits since last release:"
          echo "$sanitized_commits"
          echo "commits=$sanitized_commits" >> $GITHUB_ENV

      - name: Create Release
        id: create_release
        run: |
          version="v${{ env.total_commits }}"
          
          # If the commit count is divisible by 10, create a major release
          if [ $(( $total_commits % 10 )) -eq 0 ]; then
            version="v$(($total_commits / 10))0.0"
          fi

          echo "Creating release with version $version"
          
          # Create release using GitHub CLI or API
          gh release create $version --title "Release $version" --notes "Automated release for commit $total_commits. \n\nCommits:\n${{ env.commits }}"

        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
